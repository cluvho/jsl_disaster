<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.disaster.mapper.MemberMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="memberListMap" type="com.disaster.domain.MemberDTO">
        <id property="memberId" column="member_id"/>
        <result property="email" column="email"/>
        <result property="passwordHash" column="password_hash"/>
        <result property="name" column="name"/>
        <result property="nickname" column="nickname"/>
        <result property="phone" column="phone"/>
        <result property="lineUserId" column="line_user_id"/>
        <result property="role" column="role"/>
        <result property="isActive" column="is_active"/>
        <result property="marketingConsent" column="marketing_consent"/>
        <result property="termsAgreedAt" column="terms_agreed_at"/>
        <result property="privacyAgreedAt" column="privacy_agreed_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <resultMap id="memberWithAddressMap" type="com.disaster.domain.MemberDTO">
        <id property="memberId" column="member_id"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="name" column="name"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <!-- 이메일 중복 확인 -->
    <select id="countByEmail" resultType="int">
        SELECT COUNT(*) FROM member WHERE email = #{email}
    </select>
    
    <!-- 닉네임 중복 확인 -->
    <select id="countByNickname" resultType="int">
        SELECT COUNT(*) FROM member WHERE nickname = #{nickname}
    </select>
    
    <!-- 회원 등록 -->
    <insert id="insertMember" parameterType="com.disaster.domain.MemberDTO" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (
            email, 
            password_hash, 
            name,
            nickname,
            phone, 
            role, 
            is_active, 
            marketing_consent,
            terms_agreed_at,
            privacy_agreed_at
        ) VALUES (
            #{email}, 
            #{passwordHash}, 
            #{name},
            #{nickname},
            #{phone}, 
            #{role}, 
            #{isActive}, 
            #{marketingConsent},
            #{termsAgreedAt},
            #{privacyAgreedAt}
        )
    </insert>
    
    <!-- 주소 등록 -->
    <insert id="insertMemberAddress" parameterType="com.disaster.domain.MemberAddressDTO">
        INSERT INTO member_address (
            member_id,
            postal_code,
            pref_code,
            muni_code,
            addr_line1,
            addr_line2,
            lat,
            lon,
            is_primary,
            disaster_status
        ) VALUES (
            #{memberId},
            #{postalCode},
            #{prefCode},
            #{muniCode},
            #{addrLine1},
            #{addrLine2},
            #{lat},
            #{lon},
            #{isPrimary},
            #{disasterStatus}
        )
    </insert>
    
    <!-- 로그인 - 이메일로 회원 조회 -->
    <select id="findByEmail" resultType="com.disaster.domain.MemberDTO">
        SELECT 
            member_id as memberId,
            email,
            password_hash as passwordHash,
            name,
            nickname,
            phone,
            line_user_id as lineUserId,
            role,
            is_active as isActive,
            marketing_consent as marketingConsent,
            terms_agreed_at as termsAgreedAt,
            privacy_agreed_at as privacyAgreedAt,
            created_at as createdAt,
            updated_at as updatedAt
        FROM member 
        WHERE email = #{email} AND is_active = TRUE
    </select>
    
    <!-- 리셋 토큰 업데이트 -->
    <update id="updateResetToken">
        UPDATE member SET 
            reset_token = #{resetToken},
            reset_token_expires = #{expiresAt}
        WHERE email = #{email}
    </update>
    
    <!-- 토큰으로 사용자 조회 -->
    <select id="findByResetToken" resultType="com.disaster.domain.MemberDTO">
        SELECT 
            member_id as memberId,
            email,
            reset_token_expires as resetTokenExpires
        FROM member 
        WHERE reset_token = #{resetToken} AND is_active = TRUE
    </select>

    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword">
        UPDATE member SET 
            password_hash = #{passwordHash}
        WHERE email = #{email}
    </update>

    <!-- 토큰 삭제 -->
    <update id="clearResetToken">
        UPDATE member SET 
            reset_token = NULL,
            reset_token_expires = NULL
        WHERE email = #{email}
    </update>

    <!-- 인덱스용 주소 조회 -->
    <select id="findPrimaryAddressByEmail" resultType="com.disaster.domain.MemberAddressDTO">
        SELECT
            ma.address_id as addressId,
            ma.member_id as memberId,
            ma.postal_code as postalCode,
            ma.pref_code as prefCode,
            ma.muni_code as muniCode,
            ma.addr_line1 as addrLine1,
            ma.addr_line2 as addrLine2,
            ma.lat as lat,
            ma.lon as lon,
            ma.is_primary as isPrimary,
            ma.disaster_status as disasterStatus,
            ma.created_at as createdAt
        FROM member m
        JOIN member_address ma ON m.member_id = ma.member_id
        WHERE m.email = #{email} 
        AND ma.is_primary = TRUE
        LIMIT 1
    </select>
    
    <!-- 전체 회원정보 조회 -->
    <select id="findByMember" resultMap="memberListMap">
        SELECT
            m.member_id,
            m.email,
            m.password_hash,
            m.name,
            m.nickname,
            m.phone,
            m.line_user_id,
            m.role,
            m.is_active,
            m.marketing_consent,
            m.terms_agreed_at,
            m.privacy_agreed_at,
            m.created_at,
            m.updated_at
        FROM
            member m
        LEFT JOIN
            member_address ma ON m.member_id = ma.member_id
        WHERE
            ma.is_primary = true OR ma.address_id IS NULL
    </select>
    
    <!-- 신규 가입자 조회 -->
    <select id="countNewMembers" resultType="int">
        SELECT COUNT(*) FROM member WHERE created_at >= NOW() - INTERVAL 3 DAY
    </select>
    
    <!-- 전체 회원수 조회 -->
    <select id="totalMemberCount" resultType="int">
        SELECT COUNT(*) FROM member
    </select>
    
    <!-- 회원정보 삭제 -->
    <delete id="deleteAddressesByMemberId" parameterType="long">
        DELETE FROM member_address
        WHERE member_id = #{memberId}
    </delete>

    <delete id="deleteMemberById" parameterType="long">
        DELETE FROM member
        WHERE member_id = #{memberId}
    </delete>
    
    <!-- MemberMapper.xml에 추가 -->
<select id="findAddressByMemberId" resultType="com.disaster.domain.MemberAddressDTO">
    SELECT postal_code, pref_code, muni_code, addr_line1, addr_line2, lat, lon
    FROM member_addresses 
    WHERE member_id = #{memberId}
</select>
    

</mapper>